name: GCC

on:
   # release:
   #  types:
   #   - created
  push:
    tags: 
      - 'a*'
 # pull_request:

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Get Version
      id: get_version
      uses: battila7/get-version-action@v2
    - run: echo ${{ steps.get_version.outputs.version }}
    - run: echo ${{ steps.get_version.outputs.version-without-v }}
    - name: Dependencies
      run: |
        sudo apt-get update && sudo apt-get install -yq libboost-all-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 --slave /usr/bin/g++ g++ /usr/bin/g++-8
    - name: Setup
      run: |
        mkdir bin
        cd bin
        cmake ../ -DWITH_WARNINGS=0 -DWITH_COREDEBUG=0 -DUSE_COREPCH=1 -DUSE_SCRIPTPCH=1 -DTOOLS=1 -DELUNA:BOOL="1" -DSERVERS=1 -DNOJEM=0 -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-fpermissive -DCMAKE_INSTALL_PREFIX=check_install -DBUILD_TESTING=0
        cd ..
    - name: Build
      run: |
        cd bin
        make -j 4 -k && make install
    - name: Check executables
      run: |
        cd bin/check_install/bin
        ./authserver --version
        ./worldserver --version
        cd ../..
    - name: 7zip pack
      uses: DuckSoft/create-7z-action@v1.0
      with:
      # file/folder path to compress
        pathSource: ./bin/check_install/bin
    # 7z archive path to write
        pathTarget: ./TrinityCore-NPCBOT-Eluna-zhCN_linux.7z
    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
        tag_name: ${{ steps.get_version.outputs.version }}
        # The name of the release. For example, `Release v1.0.1`
        release_name: TrinityCore-NPCBOT-Eluna-zhCN_${{ steps.get_version.outputs.version }}_linux
        # Text describing the contents of the tag.
        body: ${{ steps.changelog.outputs.changelog }}
        # Path to file with information about the tag.
        #body_path: # optional
        # `true` to create a draft (unpublished) release, `false` to create a published one. Default: `false`
        draft: false
        # `true` to identify the release as a prerelease. `false` to identify the release as a full release. Default: `false`
        prerelease: false
        # Any branch or commit SHA the Git tag is created from, unused if the Git tag already exists. Default: SHA of current commit
        #commitish: # optional
        # Owner of the repository if it is not the current one
        #owner: # optional
        # Repository on which to release.  Used only if you want to create the release on another repo
        #repo: # optional
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
         upload_url: ${{ steps.create_release.outputs.upload_url }}
         asset_path: ./TrinityCore-NPCBOT-Eluna-zhCN_linux.7z
         asset_name: TrinityCore-NPCBOT-Eluna-zhCN_linux.7z
         asset_content_type: application/7z
